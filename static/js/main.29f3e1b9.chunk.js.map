{"version":3,"sources":["Component/WeatherCard.js","Component/Wheather.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","tempInfo","useState","weatherState","setWeatherState","temp","humidity","pressure","country","sunset","speed","weatherMood","name","useEffect","date","Date","timeStr","getHours","getMinutes","className","toLocaleString","Wheather","searchValue","setSearchValue","setTempInfo","getWeatherInfo","a","url","fetch","res","json","data","main","sys","wind","weather","console","log","type","placeholder","value","onChange","e","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29f3e1b9.chunk.js","sourcesContent":["import React,{useEffect,useState} from 'react'\r\n\r\nconst WeatherCard = ({tempInfo}) => {\r\n    const [weatherState, setWeatherState] = useState();\r\n    const {\r\n        temp,\r\n        humidity,\r\n        pressure,\r\n        country,\r\n        sunset,\r\n        speed,\r\n        weatherMood,\r\n        name\r\n    } = tempInfo;\r\n\r\n    useEffect(() => {\r\n        if(weatherMood){\r\n          switch(weatherMood){\r\n              case \"Clouds\" : setWeatherState(\"wi-day-cloudy\");\r\n              break;\r\n              case \"Haze\" : setWeatherState(\"wi-fog\");\r\n              break;\r\n              case \"Clear\" : setWeatherState(\"wi-day-sunny\");\r\n              break;\r\n              case \"Mist\" : setWeatherState(\"wi-dust\");\r\n              break;\r\n              case \"Rainy\" : setWeatherState(\"wi-day-rain\");\r\n              break;\r\n              default: setWeatherState(\"wi-day-sunny\");\r\n              break;\r\n          }\r\n        }\r\n    }, [weatherMood]);\r\n\r\n    let sec = sunset;\r\n    let date = new Date(sec * 1000);\r\n    let timeStr = `${date.getHours()}:${date.getMinutes()}`;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"main\">\r\n          <div className=\"logo\">\r\n          <p>\r\n                <i className={`wi ${weatherState}`}></i>\r\n              </p>\r\n\r\n          </div>\r\n          <div className=\"info\">\r\n              <div className=\"deg\"><p className=\"deg-h\">{temp}&deg;</p></div>\r\n    <div className=\"mood\"><p className=\"mood-p\">{weatherMood}</p><br/><p className=\"mood-p1\">{name},{country}</p></div>\r\n              <div className=\"date\">{new Date().toLocaleString()}</div>\r\n\r\n          </div>\r\n          <div className=\"last\">\r\n          <div className=\"last-s\">\r\n              <p className={\"wi wi-sunset\"}></p></div>\r\n              <div className=\"last-1\">\r\n              <p className=\"extra-info-leftside\">\r\n                  {timeStr} <br/>\r\n                  Sunset\r\n              </p>\r\n              </div>\r\n              <div className=\"last-s\">\r\n              <p className={\"wi wi-humidity\"}></p></div>\r\n              <div className=\"last-1\">\r\n              <p className=\"extra-info-leftside\">\r\n                  {humidity} <br/>\r\n                  humidity\r\n              </p>\r\n              </div>\r\n              <div className=\"last-s\">\r\n              <p className={\"wi wi-rain\"}></p></div>\r\n              <div className=\"last-1\">\r\n              <p className=\"extra-info-leftside\">\r\n                  {pressure} <br/>\r\n                  Pressure\r\n              </p>\r\n              </div>\r\n              <div className=\"last-s\">\r\n              <p className={\"wi wi-strong-wind\"}></p></div>\r\n              <div className=\"last-1\">\r\n              <p className=\"extra-info-leftside\">\r\n                  {speed} <br/>\r\n                  Speed\r\n              </p>\r\n              </div>\r\n          </div>\r\n          \r\n\r\n          \r\n          \r\n         </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WeatherCard\r\n","import React,{useState , useEffect} from 'react'\r\nimport \"./style.css\"\r\nimport WeatherCard from './WeatherCard';\r\n\r\nconst Wheather = () => {\r\n \r\n    const [searchValue, setSearchValue] = useState('faizabad');\r\n    const [tempInfo, setTempInfo] = useState({})\r\n  \r\n\r\n    const getWeatherInfo = async () => {\r\ntry{\r\n\r\n    let url =(`https://api.openweathermap.org/data/2.5/weather?q=\r\n    ${searchValue}&units=metric&appid=9bc83e28320fef8287877367c8cfde39`);\r\n\r\n    let res = await fetch(url);\r\n    let data = await res.json();\r\n\r\n    const {temp,humidity,pressure} = data.main;\r\n\r\n    const{ country,sunset } = data.sys\r\n    const{ speed } = data.wind\r\n    const{ main: weatherMood} = data.weather[0]\r\n    const{ name } = data\r\n\r\n    const myNewWatherInfo = {\r\n        temp,\r\n        humidity,\r\n        pressure,\r\n        country,\r\n        sunset,\r\n        speed,\r\n        weatherMood,\r\n        name\r\n    }\r\n    setTempInfo(myNewWatherInfo);\r\n\r\n    console.log(temp)\r\n    console.log(humidity)\r\n    console.log(pressure)\r\n    console.log(country)\r\n    console.log(sunset)\r\n    console.log(speed)\r\n    console.log(weatherMood)\r\n    console.log(name)\r\n    // console.log(data)\r\n\r\n\r\n}catch(error){\r\n    console.log(error);\r\n}\r\n\r\n\r\n\r\n    // console.log(url)\r\n\r\n    }\r\n    \r\n    useEffect(() => {getWeatherInfo();}, []);\r\n\r\n    return (\r\n        <>\r\n     <div className=\"main-div\">\r\n         <div className=\"search\">\r\n             <input type=\"search\" placeholder=\"search\" className=\"searchfor\" value={searchValue}\r\n              onChange={(e)=>{\r\n                setSearchValue(e.target.value)\r\n              }}/>\r\n             <button onClick={getWeatherInfo}>Search</button>\r\n         </div>\r\n         \r\n     </div>   \r\n     <WeatherCard tempInfo={tempInfo}/>\r\n     </>   \r\n    )\r\n}\r\nexport default Wheather;","import React from 'react'\nimport Wheather from './Component/Wheather'\n\nconst App = () => {\n  return (\n    <>\n      <Wheather/>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}